<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>

/*
This file is part of OSAMES Micro ORM.
Copyright 2014 OSAMES

OSAMES Micro ORM is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSAMES Micro ORM is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with OSAMES Micro ORM.  If not, see <http://www.gnu.org/licenses/>.
*/
 
/* THIS FILE IS AUTOGENERATED DO NOT EDIT
*
* This file is autogenerated from HResult Orm.csv.
* If you want to add a new hresult code
* do so in the CSV file then rebuild.
*/

using System.CodeDom.Compiler;

namespace OsamesMicroOrm
{
	/// <summary>
	/// Auto generated date: <#= DateTime.Now #>
	/// </summary>
	[GeneratedCode("HResultToEnumGenerator", "1.0")]
	public enum HResultEnum
	{
		// ReSharper disable InconsistentNaming
<#
		var path = Host.ResolvePath(string.Empty);
		var file = Path.Combine(path, @"..\Resources\HResult Orm.csv");
		using (StreamReader reader = new StreamReader(file))
		{
			reader.ReadLine();
			while (!reader.EndOfStream)
			{
				string line = reader.ReadLine();
				string[] keyValue = line.Split(';');
				string hresulthexa = keyValue[0];
				string hresultcode = keyValue[1];

				if (hresultcode != "\"\"" )
				{
#>
		/// <summary>
		/// <#= keyValue[2].Substring(1, keyValue[2].Length-2) #>
		/// </summary>
		<#= hresultcode.Replace("\"","") + ",\r\n" #>	                    
<#
				}
			}
		}
#>
		// ReSharper restore InconsistentNaming
	}
} 

<#+
	//use : Pascalize(hresultcode).Insert(1,"_") + ",\r\n"
	private string Pascalize(object value)
	{
		Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
		return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
	}
#>